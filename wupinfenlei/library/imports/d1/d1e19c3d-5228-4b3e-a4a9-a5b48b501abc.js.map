{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\scripts\\shader/assets\\scripts\\shader\\ShaderManager.ts"],"names":[],"mappings":";;;;;AAAA,yCAAoC;AACpC,mDAA8C;AAE9C,IAAY,UAkBX;AAlBD,WAAY,UAAU;IAClB,iDAAW,CAAA;IACX,2CAAI,CAAA;IACJ,2DAAiB,CAAA;IACjB,+CAAK,CAAA;IACL,2CAAG,CAAA;IACH,iDAAM,CAAA;IACN,iDAAM,CAAA;IACN,iDAAM,CAAA;IACN,iDAAM,CAAA;IACN,iDAAM,CAAA;IACN,uDAAS,CAAA;IACT,6CAAI,CAAA;IACJ,uDAAS,CAAA;IACT,qDAAQ,CAAA;IACR,iDAAM,CAAA;IACN,2DAAW,CAAA;IACX,6CAAI,CAAA;AACR,CAAC,EAlBW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAkBrB;AAED;IAAA;IAiCA,CAAC;IAhCU,uBAAS,GAAhB,UAAiB,MAAiB,EAAE,MAAkB;QAClD,IAAI,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK,EAAE,CAAC,IAAI,CAAC,kBAAkB,EAAE;YACnD,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC/C,OAAO;SACV;QACD,cAAc;QACd,uEAAuE;QACvE,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;YAChC,OAAO;SACV;QACD,IAAI,MAAM,GAAG,UAAU,CAAC,IAAI,EAAE;YAC1B,IAAI,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;YAC9B,IAAI,GAAG,GAAG,mBAAS,CAAC,IAAI,CAAC,CAAC;YAC1B,IAAI,CAAC,GAAG,EAAE;gBACN,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;gBACzC,OAAO;aACV;YACD,EAAE,CAAC,mBAAmB,CAAC,OAAO,GAAG,KAAK,CAAC;YACvC,IAAI,QAAQ,GAAG,IAAI,wBAAc,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;YAC/E,IAAI,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;YAC9C,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAC7B,QAAQ,CAAC,UAAU,EAAE,CAAC;YACtB,IAAI,EAAE,GAAG,MAAa,CAAC;YACvB,EAAE,CAAC,SAAS,GAAG,QAAQ,CAAC;YACxB,EAAE,CAAC,WAAW,CAAC,SAAS,GAAG,QAAQ,CAAC;YACpC,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC;YACnB,OAAO,QAAQ,CAAC;SACnB;aACI;YACD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAC3B;IACL,CAAC;IACL,oBAAC;AAAD,CAjCA,AAiCC,IAAA","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\shader","sourcesContent":["import ShaderLab from \"./ShaderLab\";\nimport ShaderMaterial from \"./ShaderMaterial\";\n\nexport enum ShaderType {\n    Default = 0,\n    Gray,\n    GrayScaling = 100,\n    Stone,\n    Ice,\n    Frozen,\n    Mirror,\n    Poison,\n    Banish,\n    Vanish,\n    Invisible,\n    Blur,\n    GaussBlur,\n    Dissolve,\n    Fluxay,\n    FluxaySuper,\n    Pure,\n}\n\nexport default class ShaderManager {\n    static useShader(sprite: cc.Sprite, shader: ShaderType): ShaderMaterial {\n        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {\n            console.warn('Shader not surpport for canvas');\n            return;\n        }\n        // 隐藏后重新显示错误修正\n        //if (!sprite || !sprite.spriteFrame || sprite.getState() === shader) {\n        if (!sprite || !sprite.spriteFrame) {\n            return;\n        }\n        if (shader > ShaderType.Gray) {\n            let name = ShaderType[shader];\n            let lab = ShaderLab[name];\n            if (!lab) {\n                console.warn('Shader not defined', name);\n                return;\n            }\n            cc.dynamicAtlasManager.enabled = false;\n            let material = new ShaderMaterial(name, lab.vert, lab.frag, lab.defines || []);\n            let texture = sprite.spriteFrame.getTexture();\n            material.setTexture(texture);\n            material.updateHash();\n            let sp = sprite as any;\n            sp._material = material;\n            sp._renderData._material = material;\n            sp._state = shader;\n            return material;\n        }\n        else {\n            sprite.setState(shader);\n        }\n    }\n}\n"]}