{"version":3,"sources":["ListenerManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/scripts/Manager","sourcesContent":["export class Delegate {\n\tpublic mListener: Function;\n\tpublic get listener(): Function {\n\t\treturn this.mListener;\n\t}\n\n\tpublic mArgArray: any[];\n\tpublic get argArray(): any[] {\n\t\treturn this.mArgArray;\n\t}\n\n\tpublic mIsOnce = false;\n\tpublic get isOnce(): boolean {\n\t\treturn this.mIsOnce;\n\t}\n\tpublic set isOnce(isOnce: boolean) {\n\t\tthis.mIsOnce = isOnce;\n\t}\n\n\tconstructor(listener: Function, argArray: any[], isOnce: boolean = false) {\n\t\tthis.mListener = listener;\n\t\tthis.mArgArray = argArray;\n\t\tthis.mIsOnce = isOnce;\n\t}\n}\n\nexport class ListenerManager {\n\tprivate static instance: ListenerManager;\n\n\tprivate mListenerMap = new Map<string, Map<any, Delegate[]>>();\n\n\tpublic static getInstance(): ListenerManager {\n\t\tif (this.instance == null) {\n\t\t\tthis.instance = new ListenerManager();\n\t\t}\n\t\treturn this.instance;\n\t}\n\n\tpublic has(type: string, caller: any, listener: Function): boolean {\n\t\treturn this.find(type, caller, listener) !== null;\n\t}\n\n\tpublic trigger(type: string, ...argArray: any[]): boolean {\n\t\tif (!type) {\n\t\t\tconsole.error(\"Listener type is null!\");\n\t\t\treturn false;\n\t\t}\n\t\t//cc.log(\"trigger \" + type + (argArray.length > 0 ? \": \" : \".\"), ...argArray);\n\t\tlet delegateList: Delegate[] = [];\n\t\tlet callerList: any[] = [];\n\t\tlet listenerMap = this.mListenerMap.get(type);\n\t\tif (listenerMap) {\n\t\t\t// for (let [caller, listenerList] of listenerMap) {\n\t\t\t// \tfor (let delegate of listenerList) {\n\t\t\t// \t\tdelegateList.push(delegate);\n\t\t\t// \t\tcallerList.push(caller);\n\t\t\t// \t}\n\t\t\t// \tfor (let index = listenerList.length - 1; index >= 0; --index) {\n\t\t\t// \t\tif (listenerList[index].isOnce) {\n\t\t\t// \t\t\tlistenerList.splice(index, 1);\n\t\t\t// \t\t}\n\t\t\t// \t}\n\t\t\t// \tif (listenerList.length <= 0) {\n\t\t\t// \t\tlistenerMap.delete(caller);\n\t\t\t// \t}\n\t\t\t// }\n\t\t\tlistenerMap.forEach((listenerList, caller) => {\n\t\t\t\tfor (let delegate of listenerList) {\n\t\t\t\t\tdelegateList.push(delegate);\n\t\t\t\t\tcallerList.push(caller);\n\t\t\t\t}\n\t\t\t\tfor (let index = listenerList.length - 1; index >= 0; --index) {\n\t\t\t\t\tif (listenerList[index].isOnce) {\n\t\t\t\t\t\tlistenerList.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (listenerList.length <= 0) {\n\t\t\t\t\tlistenerMap.delete(caller);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (listenerMap.size <= 0) {\n\t\t\t\tthis.mListenerMap.delete(type);\n\t\t\t}\n\t\t}\n\t\tlet length = delegateList.length;\n\t\tfor (let index = 0; index < length; index++) {\n\t\t\tlet delegate: Delegate = delegateList[index];\n\t\t\tdelegate.listener.call(callerList[index], ...delegate.argArray, ...argArray);\n\t\t}\n\t\treturn length > 0;\n\t}\n\n\tpublic add(type: string, caller: any, listener: Function, ...argArray: any[]): void {\n\t\tthis.addListener(type, caller, listener, false, ...argArray);\n\t}\n\n\tpublic addOnce(type: string, caller: any, listener: Function, ...argArray: any[]): void {\n\t\tthis.addListener(type, caller, listener, true, ...argArray);\n\t}\n\n\tpublic remove(type: string, caller: any, listener: Function, onceOnly?: boolean): void {\n\t\tthis.removeBy((listenerType, listenerCaller, delegate) => {\n\t\t\tif (type && type !== listenerType) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (caller && caller !== listenerCaller) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (listener && listener !== delegate.listener) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (onceOnly && !delegate.isOnce) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tpublic removeAll(caller: any): void {\n\t\t// for (let [type, listenerMap] of this.mListenerMap) {\n\t\t// \tlistenerMap.delete(caller);\n\t\t// \tif (listenerMap.size <= 0) {\n\t\t// \t\tthis.mListenerMap.delete(type);\n\t\t// \t}\n\t\t// }\n\t\tthis.mListenerMap.forEach((listenerMap, type) => {\n\t\t\tlistenerMap.delete(caller);\n\t\t\tif (listenerMap.size <= 0) {\n\t\t\t\tthis.mListenerMap.delete(type);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate addListener(type: string, caller: any, listener: Function, isOnce: boolean, ...argArray: any[]): void {\n\t\tlet delegate = this.find(type, caller, listener);\n\t\tif (delegate) {\n\t\t\tdelegate.isOnce = isOnce;\n\t\t\tconsole.error(\"Listener is already exist!\");\n\t\t} else {\n\t\t\tlet delegate = new Delegate(listener, argArray, isOnce);\n\t\t\tthis.mListenerMap.get(type).get(caller).push(delegate);\n\t\t}\n\t}\n\n\tprivate removeBy(predicate: (type: string, caller: any, delegate: Delegate) => boolean): void {\n\t\tif (!predicate) {\n\t\t\treturn;\n\t\t}\n\t\tthis.mListenerMap.forEach((listenerMap, type) => {\n\t\t\tlistenerMap.forEach((listenerList, caller) => {\n\t\t\t\tfor (let index = listenerList.length - 1; index >= 0; --index) {\n\t\t\t\t\tlet delegate = listenerList[index];\n\t\t\t\t\tif (predicate(type, caller, delegate)) {\n\t\t\t\t\t\tlistenerList.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (listenerList.length <= 0) {\n\t\t\t\t\tlistenerMap.delete(caller);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (listenerMap.size <= 0) {\n\t\t\t\tthis.mListenerMap.delete(type);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate find(type: string, caller: any, listener: Function): Delegate {\n\t\tif (!type) {\n\t\t\tconsole.error(\"Listener type is null!\");\n\t\t\treturn null;\n\t\t}\n\t\tif (!caller) {\n\t\t\tconsole.error(\"Caller type is null!\");\n\t\t\treturn null;\n\t\t}\n\t\tif (!listener) {\n\t\t\tconsole.error(\"Listener is null!\");\n\t\t\treturn null;\n\t\t}\n\n\t\tlet listenerMap: Map<any, Delegate[]>;\n\t\tif (this.mListenerMap.has(type)) {\n\t\t\tlistenerMap = this.mListenerMap.get(type);\n\t\t} else {\n\t\t\tlistenerMap = new Map<any, Delegate[]>();\n\t\t\tthis.mListenerMap.set(type, listenerMap);\n\t\t}\n\t\tlet listenerList: Delegate[];\n\t\tif (listenerMap.has(caller)) {\n\t\t\tlistenerList = listenerMap.get(caller);\n\t\t} else {\n\t\t\tlistenerList = [];\n\t\t\tlistenerMap.set(caller, listenerList);\n\t\t}\n\n\t\tfor (let delegate of listenerList) {\n\t\t\tif (delegate.mListener === listener) {\n\t\t\t\treturn delegate;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}"]}