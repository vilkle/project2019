{"version":3,"sources":["Set.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/scripts/collections","sourcesContent":["import * as util from './util';\n\nimport * as arrays from './arrays';\n\nimport Dictionary from './Dictionary';\n\nexport default class Set<T> {\n\n    /**\n     * Dictionary key and value holds the elements in the set.\n     * @type {Object}\n     * @protected\n     */\n    protected dictionary: Dictionary<T, any>;\n\n    /**\n     * Creates an empty set.\n     * @class <p>A set is a data structure that contains no duplicate items.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStringFunction 可选函数，用于将元素转换为字符串。\n     * 如果元素不是字符串，或者toString()不合适，则必须提供一个接收键并返回惟一字符串的自定义函数。\n     */\n    constructor(toStringFunction?: (item: T) => string) {\n        this.dictionary = new Dictionary<T, any>(toStringFunction);\n    }\n\n\n\n    /**\n     * Returns true if this set contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this set contains the specified element,\n     * false otherwise.\n     */\n    contains(element: T): boolean {\n        return this.dictionary.containsKey(element);\n    }\n\n    /**\n     * Adds the specified element to this set if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this set did not already contain the specified element.\n     */\n    add(element: T): boolean {\n        if (this.contains(element) || util.isUndefined(element)) {\n            return false;\n        } else {\n            this.dictionary.setValue(element, element);\n            return true;\n        }\n    }\n\n    /**\n     * Performs an intersecion between this and another set.\n     * Removes all values that are not present this set and the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    intersection(otherSet: Set<T>): void {\n        const set = this;\n        this.forEach(function(element: T): boolean {\n            if (!otherSet.contains(element)) {\n                set.remove(element);\n            }\n            return true;\n        });\n    }\n\n    /**\n     * Performs a union between this and another set.\n     * Adds all values from the given set to this set.\n     * @param {collections.Set} otherSet other set.\n     */\n    union(otherSet: Set<T>): void {\n        const set = this;\n        otherSet.forEach(function(element: T): boolean {\n            set.add(element);\n            return true;\n        });\n    }\n\n    /**\n     * Performs a difference between this and another set.\n     * Removes from this set all the values that are present in the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    difference(otherSet: Set<T>): void {\n        const set = this;\n        otherSet.forEach(function(element: T): boolean {\n            set.remove(element);\n            return true;\n        });\n    }\n\n    /**\n     * Checks whether the given set contains all the elements in this set.\n     * @param {collections.Set} otherSet other set.\n     * @return {boolean} true if this set is a subset of the given set.\n     */\n    isSubsetOf(otherSet: Set<T>): boolean {\n\n        if (this.size() > otherSet.size()) {\n            return false;\n        }\n\n        let isSub = true;\n        this.forEach(function(element) {\n            if (!otherSet.contains(element)) {\n                isSub = false;\n                return false;\n            }\n            return true;\n        });\n        return isSub;\n    }\n\n    /**\n     * Removes the specified element from this set if it is present.\n     * @return {boolean} true if this set contained the specified element.\n     */\n    remove(element: T): boolean {\n        if (!this.contains(element)) {\n            return false;\n        } else {\n            this.dictionary.remove(element);\n            return true;\n        }\n    }\n\n    /**\n     * Executes the provided function once for each element\n     * present in this set.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one arguments: the element. To break the iteration you can\n     * optionally return false.\n     */\n    forEach(callback: util.ILoopFunction<T>): void {\n        this.dictionary.forEach(function(k, v) {\n            return callback(v);\n        });\n    }\n\n    /**\n     * Returns an array containing all of the elements in this set in arbitrary order.\n     * @return {Array} an array containing all of the elements in this set.\n     */\n    toArray(): T[] {\n        return this.dictionary.values();\n    }\n\n    /**\n     * Returns true if this set contains no elements.\n     * @return {boolean} true if this set contains no elements.\n     */\n    isEmpty(): boolean {\n        return this.dictionary.isEmpty();\n    }\n\n    /**\n     * Returns the number of elements in this set.\n     * @return {number} the number of elements in this set.\n     */\n    size(): number {\n        return this.dictionary.size();\n    }\n\n    /**\n     * Removes all of the elements from this set.\n     */\n    clear(): void {\n        this.dictionary.clear();\n    }\n\n    /*\n    * Provides a string representation for display\n    */\n    toString(): string {\n        return arrays.toString(this.toArray());\n    }\n}// end of Set\n"]}