{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\scripts\\shader/assets\\scripts\\shader\\ShaderLab.ts"],"names":[],"mappings":";;;;;AACA,IAAM,GAAG,GAAG,6MASV,CAAC;AAEH,IAAM,SAAS,GAAG;IACd,WAAW,EAAE;QACT,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,4QASC;KACI;IACD,KAAK,EAAE;QACH,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,sRAUC;KACI;IACD,GAAG,EAAE;QACD,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,sUAWC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,sNAUC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,0NAWC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,6PAaC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,ySAaC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,qRAUC;KACI;IACD,SAAS,EAAE;QACP,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,0DAIC;KACI;IACD,IAAI,EAAE;QACF,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,u6BA0BC;KACI;IACD,SAAS,EAAE;QACP,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,45BA8BC;KACI;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,4ZAqBC;KACI;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,ygCAwBC;KACI;IACD,WAAW,EAAE;QACT,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,6kCAuCC;KACI;IACD,IAAI,EAAE;QACF,IAAI,EAAE,GAAG;QACT,IAAI,EACZ,oLAQC;KACI;CACJ,CAAC;AAEF,kBAAe,SAAS,CAAC","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\shader","sourcesContent":["\nconst MVP = `\nuniform mat4 viewProj;\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nvarying vec2 uv0;\nvoid main () {\n    vec4 pos = viewProj * vec4(a_position, 1);\n    gl_Position = pos;\n    uv0 = a_uv0;\n}`;\n\nconst ShaderLab = {\n    GrayScaling: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nvarying vec2 uv0;\nvoid main () {\n    vec4 c = color * texture2D(texture, uv0);\n    float gray = dot(c.rgb, vec3(0.299 * 0.5, 0.587 * 0.5, 0.114 * 0.5));\n    gl_FragColor = vec4(gray, gray, gray, c.a * 0.5);\n}\n`\n    },\n    Stone: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nvarying vec2 uv0;\nvoid main () {\n    vec4 c = color * texture2D(texture, uv0);\n    float clrbright = (c.r + c.g + c.b) * (1. / 3.);\n    float gray = (0.6) * clrbright;\n    gl_FragColor = vec4(gray, gray, gray, c.a);\n}\n`\n    },\n    Ice: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nvarying vec2 uv0;\nvoid main () {\n    vec4 clrx = color * texture2D(texture, uv0);\n    float brightness = (clrx.r + clrx.g + clrx.b) * (1. / 3.);\n\tfloat gray = (1.5)*brightness;\n\tclrx = vec4(gray, gray, gray, clrx.a)*vec4(0.8,1.2,1.5,1);\n    gl_FragColor =clrx;\n}\n`\n    },\n    Frozen: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nvarying vec2 uv0;\nvoid main () {\n    vec4 c = color * texture2D(texture, uv0);\n    c *= vec4(0.8, 1, 0.8, 1);\n\tc.b += c.a * 0.2;\n    gl_FragColor = c;\n}\n`\n    },\n    Mirror: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nvarying vec2 uv0;\nvoid main () {\n    vec4 c = color * texture2D(texture, uv0);\n    c.r *= 0.5;\n    c.g *= 0.8;\n    c.b += c.a * 0.2;\n    gl_FragColor = c;\n}\n`\n    },\n    Poison: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nvarying vec2 uv0;\nvoid main () {\n    vec4 c = color * texture2D(texture, uv0);\n    c.r *= 0.8;\n\tc.r += 0.08 * c.a;\n\tc.g *= 0.8;\n    c.g += 0.2 * c.a;\n\tc.b *= 0.8;\n    gl_FragColor = c;\n}\n`\n    },\n    Banish: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nvarying vec2 uv0;\nvoid main () {\n    vec4 c = color * texture2D(texture, uv0);\n    float gg = (c.r + c.g + c.b) * (1.0 / 3.0);\n    c.r = gg * 0.9;\n    c.g = gg * 1.2;\n    c.b = gg * 0.8;\n    c.a *= (gg + 0.1);\n    gl_FragColor = c;\n}\n`\n    },\n    Vanish: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nvarying vec2 uv0;\nvoid main () {\n    vec4 c = color * texture2D(texture, uv0);\n    float gray = (c.r + c.g + c.b) * (1. / 3.);\n    float rgb = gray * 0.8;\n    gl_FragColor = vec4(rgb, rgb, rgb, c.a * (gray + 0.1));\n}\n`\n    },\n    Invisible: {\n        vert: MVP,\n        frag: \n`\nvoid main () {\n    gl_FragColor = vec4(0,0,0,0);\n}\n`\n    },\n    Blur: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nuniform float num;\nvarying vec2 uv0;\nvoid main () {\n    vec4 sum = vec4(0.0);\n    vec2 size = vec2(num,num);\n    sum += texture2D(texture, uv0 - 0.4 * size) * 0.05;\n\tsum += texture2D(texture, uv0 - 0.3 * size) * 0.09;\n\tsum += texture2D(texture, uv0 - 0.2 * size) * 0.12;\n\tsum += texture2D(texture, uv0 - 0.1 * size) * 0.15;\n\tsum += texture2D(texture, uv0             ) * 0.16;\n\tsum += texture2D(texture, uv0 + 0.1 * size) * 0.15;\n\tsum += texture2D(texture, uv0 + 0.2 * size) * 0.12;\n\tsum += texture2D(texture, uv0 + 0.3 * size) * 0.09;\n    sum += texture2D(texture, uv0 + 0.4 * size) * 0.05;\n    \n    vec4 vectemp = vec4(0,0,0,0);\n    vec4 substract = vec4(0,0,0,0);\n    vectemp = (sum - substract) * color;\n\n    float alpha = texture2D(texture, uv0).a;\n    if(alpha < 0.05) { gl_FragColor = vec4(0 , 0 , 0 , 0); }\n\telse { gl_FragColor = vectemp; }\n}\n`\n    },\n    GaussBlur: {\n        vert: MVP,\n        frag: \n`\n#define repeats 5.\nuniform sampler2D texture;\nuniform vec4 color;\nuniform float num;\nvarying vec2 uv0;\n\nvec4 draw(vec2 uv) {\n    return color * texture2D(texture,uv).rgba; \n}\nfloat grid(float var, float size) {\n    return floor(var*size)/size;\n}\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid main()\n{\n    vec4 blurred_image = vec4(0.);\n    for (float i = 0.; i < repeats; i++) { \n        vec2 q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i,uv0.x+uv0.y))+num); \n        vec2 uv2 = uv0+(q*num);\n        blurred_image += draw(uv2)/2.;\n        q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i+2.,uv0.x+uv0.y+24.))+num); \n        uv2 = uv0+(q*num);\n        blurred_image += draw(uv2)/2.;\n    }\n    blurred_image /= repeats;\n    gl_FragColor = vec4(blurred_image);\n}\n`\n    },\n    Dissolve: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nuniform float time;\nvarying vec2 uv0;\n\nvoid main()\n{\n    vec4 c = color * texture2D(texture,uv0);\n    float height = c.r;\n    if(height < time)\n    {\n        discard;\n    }\n    if(height < time+0.04)\n    {\n        // 溶解颜色，可以自定义\n        c = vec4(.9,.6,0.3,c.a);\n    }\n    gl_FragColor = c;\n}\n`\n    },\n    Fluxay: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nuniform float time;\nvarying vec2 uv0;\n\nvoid main()\n{\n    vec4 src_color = color * texture2D(texture, uv0).rgba;\n\n    float width = 0.08;       //流光的宽度范围 (调整该值改变流光的宽度)\n    float start = tan(time/1.414);  //流光的起始x坐标\n    float strength = 0.008;   //流光增亮强度   (调整该值改变流光的增亮强度)\n    float offset = 0.5;      //偏移值         (调整该值改变流光的倾斜程度)\n    if(uv0.x < (start - offset * uv0.y) &&  uv0.x > (start - offset * uv0.y - width))\n    {\n        vec3 improve = strength * vec3(255, 255, 255);\n        vec3 result = improve * vec3( src_color.r, src_color.g, src_color.b);\n        gl_FragColor = vec4(result, src_color.a);\n\n    }else{\n        gl_FragColor = src_color;\n    }\n}\n`\n    },\n    FluxaySuper: {\n        vert: MVP,\n        frag: \n`\n#define TAU 6.12\n#define MAX_ITER 5\nuniform sampler2D texture;\nuniform vec4 color;\nuniform float time;\nvarying vec2 uv0;\n\nvoid main()\n{\n    float time = time * .5+5.;\n    // uv should be the 0-1 uv of texture...\n    vec2 uv = uv0.xy;//fragCoord.xy / iResolution.xy;\n    \n    vec2 p = mod(uv*TAU, TAU)-250.0;\n\n    vec2 i = vec2(p);\n    float c = 1.0;\n    float inten = .0045;\n\n    for (int n = 0; n < MAX_ITER; n++) \n    {\n        float t =  time * (1.0 - (3.5 / float(n+1)));\n        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5*t + i.x));\n        c += 1.0/length(vec2(p.x / (cos(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n    }\n    c /= float(MAX_ITER);\n    c = 1.17-pow(c, 1.4);\n    vec4 tex = texture2D(texture,uv);\n    vec3 colour = vec3(pow(abs(c), 20.0));\n    colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);\n\n    // 混合波光\n    float alpha = c*tex[3];  \n    tex[0] = tex[0] + colour[0]*alpha; \n    tex[1] = tex[1] + colour[1]*alpha; \n    tex[2] = tex[2] + colour[2]*alpha; \n    gl_FragColor = color * tex;\n}\n`\n    },\n    Pure: {\n        vert: MVP,\n        frag: \n`\nuniform sampler2D texture;\nuniform vec4 color;\nvarying vec2 uv0;\nvoid main () {\n    vec4 c = color * texture2D(texture, uv0);\n    gl_FragColor = vec4(color.rgb, c.a);\n}\n`\n    }\n};\n\nexport default ShaderLab;\n"]}