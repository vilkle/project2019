{"version":3,"sources":["AudioManager.ts"],"names":[],"mappings":";;;;;AAAA,iDAAgD;AAEhD;IAAA;QAIY,QAAG,GAAW,EAAE,CAAC;IAqG7B,CAAC;IAnGiB,wBAAW,GAAzB;QAEI,IAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,EACxB;YACI,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;SACtC;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACI,gCAAS,GAAhB,UAAiB,SAAiB,EAAE,IAAc,EAAE,MAAe;QAE/D,wEAAwE;QACxE,IAAI;QACJ,cAAc;QACd,IAAI;QACJ,IAAI,IAAI,GAAG,uBAAU,CAAC,SAAS,GAAG,SAAS,CAAC;QAC5C,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,EAAE,UAAU,GAAG,EAAE,IAAI;YACrD,IAAG,GAAG,EACN;gBACI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACd,OAAO;aACV;YACP,IAAI,OAAO,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAA,CAAC,CAAA,IAAI,CAAA,CAAC,CAAA,KAAK,EAAE,MAAM,CAAA,CAAC,CAAA,MAAM,CAAA,CAAC,CAAA,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;IACD,CAAC;IACD;;OAEG;IACI,8BAAO,GAAd;QAEI,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,+BAAQ,GAAf;QAEI,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;IAED;;OAEG;IACI,gCAAS,GAAhB;QAEI,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACI,8BAAO,GAAd,UAAe,SAAiB;QAE5B,IAAG,IAAI,CAAC,GAAG,IAAI,SAAS,EACxB;YACI,OAAO;SACV;QACD,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,wEAAwE;QACxE,IAAI;QACJ,cAAc;QACd,IAAI;QACJ,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;QAC3B,IAAI,IAAI,GAAG,uBAAU,CAAC,SAAS,GAAG,SAAS,CAAC;QAC5C,0EAA0E;QAC1E,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,EAAE,UAAU,GAAG,EAAE,IAAI;YACrD,IAAG,GAAG,EACN;gBACI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACd,OAAO;aACV;YACP,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACD,CAAC;IAED;;OAEG;IACI,gCAAS,GAAhB;QAEI,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;QAC3B,IAAI,IAAI,GAAG,uBAAU,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;QAC3C,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,EAAE,UAAU,GAAG,EAAE,IAAI;YACrD,IAAG,GAAG,EACN;gBACI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACd,OAAO;aACV;YACP,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACD,CAAC;IAtGc,qBAAQ,GAAiB,IAAI,CAAC;IAuGjD,mBAAC;CAzGD,AAyGC,IAAA;AAzGY,oCAAY","file":"","sourceRoot":"../../../../../assets/scripts/Manager","sourcesContent":["import { ConstValue } from \"../Data/ConstValue\";\n\nexport class AudioManager\n{\n    private static instance: AudioManager = null;\n\n    private bgm: string = \"\";\n\n    public static getInstance(): AudioManager\n    {\n        if(this.instance == null)\n        {\n            this.instance = new AudioManager();\n        }\n        return this.instance;\n    }\n\n    /**\n     * 播放音频文件\n     * @param soundName 音频名字\n     * @param loop 是否循环\n     * @param volume 音量大小\n     */\n    public playSound(soundName: string, loop?: boolean, volume?: number)\n    {\n        // if(GameDataManager.getInstance().getGameData().playerInfo.closeAudio)\n        // {\n        //     return;\n        // }\n        let path = ConstValue.AUDIO_DIR + soundName;\n        cc.loader.loadRes(path, cc.AudioClip, function (err, clip) {\n            if(err)\n            {\n                cc.error(err);\n                return;\n            }\n\t\t    var audioID = cc.audioEngine.play(clip, loop?loop:false, volume?volume:1);\n\t\t});\n    }\n    /**\n     * 停止正在播放的所有音频\n     */\n    public stopAll()\n    {\n        cc.audioEngine.stopAll();\n    }\n\n    /**\n     * 暂停现在正在播放的所有音频\n     */\n    public pauseAll()\n    {\n        cc.audioEngine.pauseAll();\n    }\n\n    /**\n     * 恢复播放所有之前暂停的所有音频\n     */\n    public resumeAll()\n    {\n        cc.audioEngine.resumeAll();\n    }\n\n    /**\n     * 播放背景音乐\n     * @param soundName 背景音乐文件名\n     */\n    public playBGM(soundName: string)\n    {\n        if(this.bgm == soundName)\n        {\n            return;\n        }\n        this.bgm = soundName;\n        // if(GameDataManager.getInstance().getGameData().playerInfo.closeAudio)\n        // {\n        //     return;\n        // }\n        cc.audioEngine.stopMusic();\n        let path = ConstValue.AUDIO_DIR + soundName;\n        //cc.audioEngine.play(cc.url.raw(path), loop?loop:false, volume?volume:1);\n        cc.loader.loadRes(path, cc.AudioClip, function (err, clip) {\n            if(err)\n            {\n                cc.error(err);\n                return;\n            }\n\t\t    cc.audioEngine.playMusic(clip, true);\n\t\t});\n    }\n\n    /**\n     * 重新开始播放背景音乐\n     */\n    public resumeBGM()\n    {\n        cc.audioEngine.stopMusic();\n        let path = ConstValue.AUDIO_DIR + this.bgm;\n        cc.loader.loadRes(path, cc.AudioClip, function (err, clip) {\n            if(err)\n            {\n                cc.error(err);\n                return;\n            }\n\t\t    cc.audioEngine.playMusic(clip, true);\n\t\t});\n    }\n}"]}